namespace AmsiSandbox
{
    using System;
    using System.Collections.Generic;
    using System.Xml;

    /// <summary>
    ///     Event arguments for the malware alert event.
    /// </summary>
    /// <seealso cref="System.EventArgs" />
    public class MalwareAlertEventArgs : EventArgs
    {
        public MalwareAlertEventArgs(IList<object> values, XmlElement eventXml)
        {
            EventId = int.TryParse(values[0].ToString(), out var eid) ? eid : 0;
            EventTime = DateTime.TryParse(values[1].ToString(), out var edt)
                ? new DateTimeOffset(edt)
                : DateTimeOffset.MinValue;
            SeverityId = int.TryParse(values[2].ToString(), out var sid) ? sid : 0;
            Severity = values[3].ToString();
            CategoryId = int.TryParse(values[4].ToString(), out var cid) ? cid : 0;
            Category = values[5].ToString();
            EventUser = values[6].ToString();
            ActionId = int.TryParse(values[7].ToString(), out var aid) ? aid : 0;
            Action = values[8].ToString();
            ErrorCode = values[9].ToString();
            ErrorDescription = values[10].ToString();
            EventXml = eventXml;
            MalwareAlertCondition = SetAlertCondition(EventId);
        }

        public int EventId { get; }

        public DateTimeOffset EventTime { get; }

        public int SeverityId { get; }

        public string Severity { get; }

        public int CategoryId { get; }

        public string Category { get; }

        public string EventUser { get; }

        public int ActionId { get; }

        public string Action { get; }

        public string ErrorCode { get; }

        public string ErrorDescription { get; }

        public XmlElement EventXml { get; }

        public MalwareAlertConditionEnum MalwareAlertCondition { get; }

        private MalwareAlertConditionEnum SetAlertCondition(int eid)
        {
            switch (eid)
            {
                case MalwareEventCodes.MALWAREPROTECTION_SCAN_FAILED:
                    return MalwareAlertConditionEnum.ScanFailed;

                case MalwareEventCodes.MALWAREPROTECTION_MALWARE_DETECTED:
                    return MalwareAlertConditionEnum.MalwareDetected;

                case MalwareEventCodes.MALWAREPROTECTION_MALWARE_ACTION_TAKEN:
                    return MalwareAlertConditionEnum.MalwareActionTaken;

                case MalwareEventCodes.MALWAREPROTECTION_MALWARE_ACTION_FAILED:
                    return MalwareAlertConditionEnum.MalwareActionFailed;

                case MalwareEventCodes.MALWAREPROTECTION_BEHAVIOR_DETECTED:
                    return MalwareAlertConditionEnum.MalwareBehaviorDetected;

                case MalwareEventCodes.MALWAREPROTECTION_STATE_MALWARE_DETECTED:
                    return MalwareAlertConditionEnum.MalwareStateMalwareDetected;

                case MalwareEventCodes.MALWAREPROTECTION_STATE_MALWARE_ACTION_TAKEN:
                    return MalwareAlertConditionEnum.MalwareStateMalwareActionTaken;

                case MalwareEventCodes.MALWAREPROTECTION_STATE_MALWARE_ACTION_FAILED:
                case MalwareEventCodes.MALWAREPROTECTION_STATE_MALWARE_ACTION_CRITICALLY_FAILED:
                    return MalwareAlertConditionEnum.MalwareStateMalwareActionFailed;

                case MalwareEventCodes.MALWAREPROTECTION_SIGNATURE_UPDATED:
                case MalwareEventCodes.MALWAREPROTECTION_SIGNATURE_UPDATE_FAILED:
                case MalwareEventCodes.MALWAREPROTECTION_ENGINE_FAILURE:
                case MalwareEventCodes.MALWAREPROTECTION_ENGINE_UPDATED:
                case MalwareEventCodes.MALWAREPROTECTION_ENGINE_UPDATE_FAILED:
                case MalwareEventCodes.MALWAREPROTECTION_ENGINE_UPDATE_PLATFORMOUTOFDATE:
                    return MalwareAlertConditionEnum.MailwareUpdatesOrFailed;

                case 0: return MalwareAlertConditionEnum.UnknownError;

                default:
                    return MalwareAlertConditionEnum.OtherError;
            }
        }
    }
}